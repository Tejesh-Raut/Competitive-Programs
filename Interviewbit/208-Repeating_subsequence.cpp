/*
Given a string, find if there is any sub-sequence that repeats itself.
A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

Input:
string

Output:

0/1
0 -> No
1 -> Yes 
Example:

abab ------> yes, ab is repeated. So, return 1. 
abba ------> No, a and b follow different order. So, return 0. 
NOTE : sub-sequence length should be greater than or equal to 2


*/

int Solution::anytwo(string A) {
    int n = A.length();
    unordered_map<char, int> M;
    for(int i=0; i<n; i++){
        if(M.find(A[i])==M.end()){
            M[A[i]] = 1;
        }
        else{
            M[A[i]]++;
            if(M[A[i]]>=4){
                return 1;
            }
        }
    }
    string A1="";
    for(int i=0;i<n; i++){
        if(M[A[i]]>1){
            A1 += A[i];
        }
    }
    // cout<<"*"<<A1<<endl;
    n = A1.length();
    if((n%2)==0){
        for(int i=0; i<(n/2); i++){
            if(A1[i]!=A1[n-1-i]){
                return 1;
            }
        }
        return 0;
    }
    else{
        for(int i=0; i<(n/2); i++){
            if(A1[i]!=A1[n-1-i]){
                return 1;
            }
        }
        if(A1[(n/2)]==A1[(n/2)+1]){
            return 1;
        }
        return 0;
    }
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
     
}
